let buildTransitions = (transitionsStr) => {
    let transitionList = transitionsStr.split('\n');
    let transitions = new Map();
    transitionList.forEach((transitionStr) => {
        let inputOutput = transitionStr.split(' => ');
        let inputs = inputOutput[0].split(', ');
        let output = inputOutput[1].split(' ');
        let outputElement = output[1];
        let outputQuantity = parseInt(output[0], 10);
        let input = inputs.map((inp) => {
            let thisInput = inp.split(' ');
            return {element: thisInput[1], quantity: parseInt(thisInput[0], 10)};
        });
        transitions.set(outputElement, {input, outputElement, outputQuantity});
    });
    return transitions;
}
undefined
let stepsToOre = (element, transitions) => {
    if(element === 'ORE') return 0;
    let transition = transitions.get(element);
    if(!transition){
        console.log('No transition for ' + element);
        return 0;
    }
    if(transition.input[0].element === 'ORE'){
        return 1;
    } else {
        let maxNextSteps = 0;
        transition.input.forEach((input) => {
            let nextSteps = stepsToOre(input.element, transitions);
            if(nextSteps > maxNextSteps){
                maxNextSteps = nextSteps;
            }
        });
        return 1 + maxNextSteps;
    }
}
undefined
let countNeededOre = (transitions) => {
    let neededInputs = translateToInput('FUEL', 1, transitions);
    let stepCount = 0;
    while(stepCount < 1000 && (neededInputs.length > 1 || neededInputs[0].element !== 'ORE')){
        let nextToTranslate = '';
        let nextToTranslateIndex = -1;
        let maxStepsToOre = 0;
        neededInputs.forEach((input, index) => {
            let thisSteps = stepsToOre(input.element, transitions);
            if(thisSteps > maxStepsToOre) {
                maxStepsToOre = thisSteps;
                nextToTranslate = input;
                nextToTranslateIndex = index;
            }
        });
        let newInputs = translateToInput(nextToTranslate.element, nextToTranslate.quantity, transitions);
        neededInputs.splice(nextToTranslateIndex, 1);
        newInputs.forEach((newInput) => {
            let existingNeeded = neededInputs.find((input) => input.element === newInput.element);
            if(existingNeeded) {
                existingNeeded.quantity = existingNeeded.quantity + newInput.quantity;
            } else {
                neededInputs.push(newInput);
            }
        });
        stepCount++;
    }
    return neededInputs[0].quantity;
}
undefined
let transitionsStr = document.querySelector('pre').innerText;
undefined
transitionsStr = transitionsStr.substr(0, transitionsStr.length - 1);
"3 LMPDB, 11 CBTKP => 7 PZDPS
5 CBKW, 4 CXBH => 9 KXNDF
1 LVDN, 4 HGDHV => 1 PCXS
11 PCXS => 2 XTBRS
5 RVSF => 7 TDCH
1 CXBH, 6 PXVN => 8 GQXV
3 DBCB, 3 QLNK => 4 CTFCD
7 PZDPS, 18 HGDHV, 9 TBKM => 4 JHVL
10 QGSV, 1 DBCB, 7 LTHFX => 3 BLRSQ
12 CBTKP, 7 SPBF => 5 KSQL
1 QXHDQ, 5 MQKH, 10 XRCB, 30 SQWHX, 2 PQZVD, 30 TFST, 39 JPFC, 1 FDGS, 17 LVDN => 1 FUEL
2 TBKM => 8 PFHKT
13 CBTKP => 5 QLNK
12 TVRDM, 6 QGSV, 16 LMPDB => 4 PQZVD
7 TDCH, 17 PXVN, 4 ZLKZ => 6 XRCB
1 QBJQ, 26 CBKW => 4 RVSF
24 KXNDF, 3 BLRSQ => 9 GSHKQ
12 BLRSQ, 3 HGDHV => 9 RQNGQ
2 RFBK, 2 WHWS => 8 CBKW
1 WHWS => 7 LTHFX
13 CKQLD, 10 ZLKZ, 2 GQXV => 8 TVHC
1 DBCB => 2 JZXKW
8 SPBF => 7 CXBH
11 LTHFX, 1 PTGLG, 10 NCQTM => 6 SQWHX
16 PFHKT => 3 HGDHV
3 LVDN, 5 PZDPS, 1 SPBF => 9 CQBCL
19 BLRSQ, 1 BLQRD, 5 GSHKQ, 2 LVDN, 3 LMPDB, 5 KTJR => 1 QXHDQ
1 RFBK, 1 JPFC => 7 PXVN
110 ORE => 3 MQKH
1 FPBRB, 7 MQKH => 7 SDJBT
128 ORE => 7 FPBRB
3 WRWGP => 2 RFBK
1 PFHKT, 4 SPBF => 7 JPFC
14 LTHFX, 2 JZXKW, 2 BLRSQ, 2 MHVJP, 6 RQNGQ, 1 CQBCL, 8 TDCH, 2 NJTR => 2 FDGS
4 SDJBT, 2 LMPDB => 8 PLGS
1 RFBK, 1 TBKM => 6 CBTKP
17 LVDN, 2 CBTKP => 4 QGSV
7 WRWGP => 9 LMPDB
3 CKQLD => 6 WHWS
14 CBTKP, 9 XTBRS, 9 GSHKQ, 12 GQXV, 20 LTHFX, 1 RQNGQ, 1 KTJR, 3 BLRSQ => 7 TFST
1 QPCQ => 5 BLQRD
6 QGSV, 1 HGDHV, 1 JPFC => 1 NJTR
1 HGDHV, 7 JHVL, 5 PZDPS => 9 MGRT
1 KSQL => 5 QBJQ
2 QLNK => 2 CKQLD
13 JZXKW, 14 XTBRS => 3 PTGLG
1 BNPXT, 2 PLGS => 7 DBCB
1 RFBK, 9 CTFCD => 1 MHVJP
1 NJTR, 1 TVHC, 2 PCXS => 1 KTJR
2 WRWGP => 6 TBKM
12 QLNK, 1 NJTR => 3 NCQTM
13 ZHCKP, 2 DBCB, 5 PXVN => 9 QPCQ
125 ORE => 3 WRWGP
6 CBTKP, 9 TBKM => 9 SPBF
1 GQXV => 6 ZHCKP
1 MGRT => 8 BNPXT
2 SPBF => 4 ZLKZ
9 TVHC, 5 KXNDF, 3 QPCQ => 3 TVRDM
1 PLGS, 7 TBKM => 8 LVDN"
let transitions = buildTransitions(transitionsStr);
undefined
countNeededOre(transitions);
VM54:2 Uncaught ReferenceError: translateToInput is not defined
    at countNeededOre (<anonymous>:2:24)
    at <anonymous>:1:1
countNeededOre @ VM54:2
(anonymous) @ VM407:1
let translateToInput = (neededElement, neededQuantity, transitions) => {
    let transition = transitions.get(neededElement);
    let quantityPerTransition = transition.outputQuantity;
    let neededTransitions = Math.ceil(neededQuantity / quantityPerTransition);
    return transition.input.map((inp) => {
        return {element: inp.element, quantity: inp.quantity * neededTransitions};
    });
}
undefined
countNeededOre(transitions);
97422
countNeededOre = (transitions, count) => {
    let neededInputs = translateToInput('FUEL', count, transitions);
    let stepCount = 0;
    while(stepCount < 1000 && (neededInputs.length > 1 || neededInputs[0].element !== 'ORE')){
        let nextToTranslate = '';
        let nextToTranslateIndex = -1;
        let maxStepsToOre = 0;
        neededInputs.forEach((input, index) => {
            let thisSteps = stepsToOre(input.element, transitions);
            if(thisSteps > maxStepsToOre) {
                maxStepsToOre = thisSteps;
                nextToTranslate = input;
                nextToTranslateIndex = index;
            }
        });
        let newInputs = translateToInput(nextToTranslate.element, nextToTranslate.quantity, transitions);
        neededInputs.splice(nextToTranslateIndex, 1);
        newInputs.forEach((newInput) => {
            let existingNeeded = neededInputs.find((input) => input.element === newInput.element);
            if(existingNeeded) {
                existingNeeded.quantity = existingNeeded.quantity + newInput.quantity;
            } else {
                neededInputs.push(newInput);
            }
        });
        stepCount++;
    }
    return neededInputs[0].quantity;
}
(transitions, count) => {
    let neededInputs = translateToInput('FUEL', count, transitions);
    let stepCount = 0;
    while(stepCount < 1000 && (neededInputs.length > 1 || neededInputs[0].elementâ€¦
countNeededOre(transitions, 1);
97422
let fuelCount = 1;
undefined
let neededOre = 97422;
undefined
while(neededOre < 1000000000000){
    fuelCount = fuelCount * 2;
    neededOre = countNeededOre(transitions, fuelCount);
}
1279880270241
let previousNeededOre = neededOre;
undefined
neededOre = neededOre / 2;
639940135120.5
neededOre = neededOre % 1;
0.5
neededOre = 639940135120;
639940135120
let previousNeededFuel = fuelCount / 2;
    
undefined
while(neededOre < 1000000000000){
    fuelCount = Math.floor((fuelCount + previousNeededFuel)/2);
    neededOre = countNeededOre(transitions,fuelCount);
    previousNeededFuel = fuelCount;
    fuelCount = fuelCount * 2;
}
37748736
fuelCount
37748736
neededOre
1439865297944
neededOre > 1000000000000
true
while(neededOre > 1000000000000) {
    fuelCount = Math.floor((fuelCount + previousNeededFuel)/2);
    neededOre = countNeededOre(transitions,fuelCount);
    previousNeededFuel = fuelCount;
    fuelCount = fuelCount / 2;
}
5971968
neededOre < 1000000000000
true
fuelCount
5971968
while(neededOre < 1000000000000){
    fuelCount = Math.floor((fuelCount + previousNeededFuel)/2);
    neededOre = countNeededOre(transitions,fuelCount);
    previousNeededFuel = fuelCount;
    fuelCount = fuelCount * 2;
}
26873856
fuelCount
26873856
neededOre = countNeededOre(transitions, (5971968 + 26873856) / 2)
1252851545058
neededOre > 1000000000000
true
fuelCount = (5971968 + 26873856) / 2;
16422912
neededOre = countNeededOre(transitions, 16422912 / 2);
626425779408
neededOre < 1000000000000
true
neededOre = countNeededOre(transitions, (16422912));
1252851545058
neededOre = countNeededOre(transitions, (16422912 + 16422912 / 2) / 2);
939638659934
neededOre = countNeededOre(transitions, (16422912  + (16422912 + 16422912 / 2) / 2)/2);
1096245095431
(16422912  + (16422912 + 16422912 / 2) / 2)/2
14370048
(16422912 + 16422912 / 2) / 2
12317184
neededOre = countNeededOre(transitions, (12317184 + 14370048) / 2)
1017941877580
(12317184 + 14370048) / 2
13343616
neededOre = countNeededOre(transitions, (12317184 + 13343616) / 2)
978790271736
(12317184 + 13343616) / 2
12830400
neededOre = countNeededOre(transitions, (12830400 + 13343616) / 2)
998366077884
(12830400 + 13343616) / 2
13087008
neededOre = countNeededOre(transitions, (13087008 + 13343616) / 2)
1008153977546
(13087008 + 13343616) / 2
13215312
neededOre = countNeededOre(transitions, (13087008 + 13215312) / 2)
1003260031179
(13087008 + 13215312) / 2
13151160
neededOre = countNeededOre(transitions, (13087008 + 13151160) / 2)
1000813049200
(13087008 + 13151160) / 2
13119084
neededOre = countNeededOre(transitions, (13087008 + 13119084) / 2)
999589563896
(13087008 + 13119084) / 2
13103046
neededOre = countNeededOre(transitions, (13103046 + 13119084) / 2)
1000201311912
(13103046 + 13119084) /  2
    
13111065
neededOre = countNeededOre(transitions, (13103046 + 13111065) / 2)
999895481772
Math.abs(13103046 - 13111065)
8019
(13103046 + 13111065) / 2
13107055.5
neededOre = countNeededOre(transitions, (13107055 + 13111065) / 2)
1000048359044
(13107055 + 13111065) / 2
13109060
neededOre = countNeededOre(transitions, (13107055 + 13109060) / 2)
999971922192
(13107055 + 13109060) / 2
13108057.5
neededOre = countNeededOre(transitions, (13108057 + 13109060) / 2)
1000010142758
(13108057 + 13109060) / 2
13108558.5
13108057 - 13109060
-1003
neededOre = countNeededOre(transitions, (13108057 + 13108558) / 2)
999990984204
(13108057 + 13108558) / 2
13108307.5
neededOre = countNeededOre(transitions, (13108307 + 13108558) / 2)
1000000528854
(13108307 + 13108558) / 2
13108432.5
neededOre = countNeededOre(transitions, (13108307 + 13108432) / 2)
999995721585
(13108307 + 13108432) / 2
13108369.5
neededOre = countNeededOre(transitions, (13108369 + 13108432) / 2)
999998086494
13108369 - 13108432
-63
(13108369 + 13108432) / 2
13108400.5
neededOre = countNeededOre(13108400)
VM413:2 Uncaught TypeError: transitions.get is not a function
    at translateToInput (<anonymous>:2:34)
    at countNeededOre (<anonymous>:2:24)
    at <anonymous>:1:13
translateToInput @ VM413:2
countNeededOre @ VM470:2
(anonymous) @ VM2615:1
neededOre = countNeededOre(transitions, 13108400)
999998012425
neededOre = countNeededOre(transitions, 13108401)
999998086494
neededOre = countNeededOre(transitions, 13108431)
1000000370114
neededOre = countNeededOre(transitions, 13108421)
999999619494
neededOre = countNeededOre(transitions, 13108426)
999999988595
neededOre = countNeededOre(transitions, 13108427)
1000000072759
