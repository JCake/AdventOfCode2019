let countAsteroidsVisible = (grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
            count++;
			coords.push([y - i,x]);
        }
    }
	let asteroidDown = false;
    for(let i = 1; y + i < grid.length && !asteroidDown; i++){
        if(grid[y + i][x] === '#'){
            asteroidDown = true;
            count++;coords.push([y + i,x]);
        }
    }
	let asteroidLeft = false;
    for(let i = 1; x - i >= 0 && !asteroidLeft; i++){
        if(grid[y][x - i] === '#'){
            asteroidLeft = true;
            count++;coords.push([y, x - i]);
        }
    }
	let asteroidRight = false;
    for(let i = 1; x + i < grid[0].length && !asteroidRight; i++){
        if(grid[y][x + i] === '#'){
            asteroidRight = true;
            count++;coords.push([y ,x+i]);
        }
    }
	let nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
	nums.forEach(xDir => {
		nums.forEach(yDir => {
			if((xDir !== yDir || xDir === 1) && (primes.includes(xDir) || primes.includes(yDir))){
				let checkedPath = false;
				if(xDir > yDir && yDir > 1 && xDir % yDir === 0){
					checkedPath = true;
                }
				if(yDir > xDir && xDir > 1 && yDir % xDir === 0){
					checkedPath = true;
                }
				if(!checkedPath){

                    let asteroidToUpperLeft = false;
                    for(let i = 1; x - xDir*i >= 0 && y - yDir*i >= 0 && !asteroidToUpperLeft; i++){
                        if(grid[y - yDir *i][x - xDir * i] === '#'){
                            asteroidToUpperLeft = true;
                            count++;coords.push([y - yDir *i,x - xDir * i]);
                        }
                    }
                    let asteroidToUpperRight = false;
                    for(let i = 1; x + xDir*i < grid[0].length && y - yDir*i >= 0 && !asteroidToUpperRight; i++){
                        if(grid[y - yDir *i][x + xDir * i] === '#'){
                            asteroidToUpperRight = true;
                            count++;coords.push([y - yDir *i,x + xDir * i]);
                        }
                    }
                    let asteroidToLowerLeft = false;
                    for(let i = 1; x - xDir*i >= 0 && y + yDir*i < grid.length && !asteroidToLowerLeft; i++){
                        if(grid[y + yDir *i][x - xDir * i] === '#'){
                            asteroidToLowerLeft = true;
                            count++;coords.push([y + yDir *i,x - xDir * i]);
                        }
                    }
                    let asteroidToLowerRight = false;
                    for(let i = 1; x + xDir*i < grid[0].length && y + yDir*i < grid.length && !asteroidToLowerRight; i++){
                        if(grid[y + yDir *i][x + xDir * i] === '#'){
                            asteroidToLowerRight = true;
                            count++;coords.push([y + yDir *i,x + xDir * i]);
                        }
                    }
                }
			}
        });
    });
	return coords;
};
undefined
countAsteroidsVisible = (grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
            count++;
			coords.push([y - i,x]);
        }
    }
	let asteroidDown = false;
    for(let i = 1; y + i < grid.length && !asteroidDown; i++){
        if(grid[y + i][x] === '#'){
            asteroidDown = true;
            count++;coords.push([y + i,x]);
        }
    }
	let asteroidLeft = false;
    for(let i = 1; x - i >= 0 && !asteroidLeft; i++){
        if(grid[y][x - i] === '#'){
            asteroidLeft = true;
            count++;coords.push([y, x - i]);
        }
    }
	let asteroidRight = false;
    for(let i = 1; x + i < grid[0].length && !asteroidRight; i++){
        if(grid[y][x + i] === '#'){
            asteroidRight = true;
            count++;coords.push([y ,x+i]);
        }
    }
	let nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
	let usedRatios = new Set();
	nums.forEach(xDir => {
		nums.forEach(yDir => {
			if(!usedRatios.has(yDir/xDir)){
				usedRatios.put(yDir/xDir);
                let asteroidToUpperLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y - yDir*i >= 0 && !asteroidToUpperLeft; i++){
                    if(grid[y - yDir *i][x - xDir * i] === '#'){
                        asteroidToUpperLeft = true;
                        count++;coords.push([y - yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToUpperRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y - yDir*i >= 0 && !asteroidToUpperRight; i++){
                    if(grid[y - yDir *i][x + xDir * i] === '#'){
                        asteroidToUpperRight = true;
                        count++;coords.push([y - yDir *i,x + xDir * i]);
                    }
                }
                let asteroidToLowerLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y + yDir*i < grid.length && !asteroidToLowerLeft; i++){
                    if(grid[y + yDir *i][x - xDir * i] === '#'){
                        asteroidToLowerLeft = true;
                        count++;coords.push([y + yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToLowerRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y + yDir*i < grid.length && !asteroidToLowerRight; i++){
                    if(grid[y + yDir *i][x + xDir * i] === '#'){
                        asteroidToLowerRight = true;
                        count++;coords.push([y + yDir *i,x + xDir * i]);
                    }
                }               
			}
        });
    });
	return coords;
};
(grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
   …
let rows = ['......#.#.',
'#..#.#....',
'..#######.',
'.#.#.###..',
'.#..#.....',
'..#....#.#',
'#..#....#.',
'.##.#..###',
'##...#..#.',
'.#....####']
undefined
let grid = rows.map(row => row.split(''));
undefined
countAsteroidsVisible(grid, 5, 8)
VM83:38 Uncaught TypeError: usedRatios.put is not a function
    at <anonymous>:38:16
    at Array.forEach (<anonymous>)
    at <anonymous>:36:8
    at Array.forEach (<anonymous>)
    at countAsteroidsVisible (<anonymous>:35:7)
    at <anonymous>:1:1
(anonymous) @ VM83:38
(anonymous) @ VM83:36
countAsteroidsVisible @ VM83:35
(anonymous) @ VM123:1
countAsteroidsVisible = (grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
            count++;
			coords.push([y - i,x]);
        }
    }
	let asteroidDown = false;
    for(let i = 1; y + i < grid.length && !asteroidDown; i++){
        if(grid[y + i][x] === '#'){
            asteroidDown = true;
            count++;coords.push([y + i,x]);
        }
    }
	let asteroidLeft = false;
    for(let i = 1; x - i >= 0 && !asteroidLeft; i++){
        if(grid[y][x - i] === '#'){
            asteroidLeft = true;
            count++;coords.push([y, x - i]);
        }
    }
	let asteroidRight = false;
    for(let i = 1; x + i < grid[0].length && !asteroidRight; i++){
        if(grid[y][x + i] === '#'){
            asteroidRight = true;
            count++;coords.push([y ,x+i]);
        }
    }
	let nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
	let usedRatios = new Set();
	nums.forEach(xDir => {
		nums.forEach(yDir => {
			if(!usedRatios.has(yDir/xDir)){
				usedRatios.add(yDir/xDir);
                let asteroidToUpperLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y - yDir*i >= 0 && !asteroidToUpperLeft; i++){
                    if(grid[y - yDir *i][x - xDir * i] === '#'){
                        asteroidToUpperLeft = true;
                        count++;coords.push([y - yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToUpperRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y - yDir*i >= 0 && !asteroidToUpperRight; i++){
                    if(grid[y - yDir *i][x + xDir * i] === '#'){
                        asteroidToUpperRight = true;
                        count++;coords.push([y - yDir *i,x + xDir * i]);
                    }
                }
                let asteroidToLowerLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y + yDir*i < grid.length && !asteroidToLowerLeft; i++){
                    if(grid[y + yDir *i][x - xDir * i] === '#'){
                        asteroidToLowerLeft = true;
                        count++;coords.push([y + yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToLowerRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y + yDir*i < grid.length && !asteroidToLowerRight; i++){
                    if(grid[y + yDir *i][x + xDir * i] === '#'){
                        asteroidToLowerRight = true;
                        count++;coords.push([y + yDir *i,x + xDir * i]);
                    }
                }               
			}
        });
    });
	return coords;
};
(grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
   …
countAsteroidsVisible(grid, 5, 8)
(33) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
let data = document.querySelector('pre').innerText;
undefined
rows = data.split('\n').slice(0,31);
(31) ["#...##.####.#.......#.##..##.#.", "#.##.#..#..#...##..##.##.#.....", "#..#####.#......#..#....#.###.#", "...#.#.#...#..#.....#..#..#.#..", ".#.....##..#...#..#.#...##.....", "##.....#..........##..#......##", ".##..##.#.#....##..##.......#..", "#.##.##....###..#...##...##....", "##.#.#............##..#...##..#", "###..##.###.....#.##...####....", "...##..#...##...##..#.#..#...#.", "..#.#.##.#.#.#####.#....####.#.", "#......###.##....#...#...#...##", ".....#...#.#.#.#....#...#......", "#..#.#.#..#....#..#...#..#..##.", "#.....#..##.....#...###..#..#.#", ".....####.#..#...##..#..#..#..#", "..#.....#.#........#.#.##..####", ".#.....##..#.##.....#...###....", "###.###....#..#..#.....#####...", "#..##.##..##.#.#....#.#......#.", ".#....#.##..#.#.#.......##.....", "##.##...#...#....###.#....#....", ".....#.######.#.#..#..#.#.....#", ".#..#.##.#....#.##..#.#...##..#", ".##.###..#..#..#.###...#####.#.", "#...#...........#.....#.......#", "#....##.#.#..##...#..####...#..", "#.####......#####.....#.##..#..", ".#...#....#...##..##.#.#......#", "#..###.....##.#.......#.##...##"]
grid = rows.map(row => row.split(''));
(31) [Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31)]
countAsteroidsVisible(grid, 0, 0)
(251) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), …]
let maxCount = 0;
undefined
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
290
rows = ['.#..#..###'
'####.###.#',
'....###.#.',
'..###.##.#',
'##.##.#.#.',
'....###..#',
'..#.#..#.#',
'#..#.#.###',
'.##...##.#',
'.....#.#..'];
VM617:2 Uncaught SyntaxError: Unexpected string
rows = ['.#..#..###',
'####.###.#',
'....###.#.',
'..###.##.#',
'##.##.#.#.',
'....###..#',
'..#.#..#.#',
'#..#.#.###',
'.##...##.#',
'.....#.#..'];
(10) [".#..#..###", "####.###.#", "....###.#.", "..###.##.#", "##.##.#.#.", "....###..#", "..#.#..#.#", "#..#.#.###", ".##...##.#", ".....#.#.."]
grid = rows.map(row => row.split(''));
(10) [Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10)]
countAsteroidsVisible(grid,6,3)
(41) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
rows = ['.#..##.###...#######',
'##.############..##.',
'.#.######.########.#',
'.###.#######.####.#.',
'#####.##.#.##.###.##',
'..#####..#.#########',
'####################',
'#.####....###.#.#.##',
'##.#################',
'#####.##.###..####..',
'..######..##.#######',
'####.##.####...##..#',
'.#####..#.######.###',
'##...#.##########...',
'#.##########.#######',
'.####.#.###.###.#.##',
'....##.##.###..#####',
'.#.#.###########.###',
'#.#.#.#####.####.###',
'###.##.####.##.#..##'];
(20) [".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##"]
countAsteroidsVisible(grid,11,13)
VM171:6 Uncaught TypeError: Cannot read property '11' of undefined
    at countAsteroidsVisible (<anonymous>:6:23)
    at <anonymous>:1:1
countAsteroidsVisible @ VM171:6
(anonymous) @ VM812:1
grid = rows.map(row => row.split(''));
(20) [Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20)]
countAsteroidsVisible(grid,11,13)
(210) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), …]
rows=['#...##.####.#.......#.##..##.#.',
'#.##.#..#..#...##..##.##.#.....',
'#..#####.#......#..#....#.###.#',
'...#.#.#...#..#.....#..#..#.#..',
'.#.....##..#...#..#.#...##.....',
'##.....#..........##..#......##',
'.##..##.#.#....##..##.......#..',
'#.##.##....###..#...##...##....',
'##.#.#............##..#...##..#',
'###..##.###.....#.##...####....',
'...##..#...##...##..#.#..#...#.',
'..#.#.##.#.#.#####.#....####.#.',
'#......###.##....#...#...#...##',
'.....#...#.#.#.#....#...#......',
'#..#.#.#..#....#..#...#..#..##.',
'#.....#..##.....#...###..#..#.#',
'.....####.#..#...##..#..#..#..#',
'..#.....#.#........#.#.##..####',
'.#.....##..#.##.....#...###....',
'###.###....#..#..#.....#####...',
'#..##.##..##.#.#....#.#......#.',
'.#....#.##..#.#.#.......##.....',
'##.##...#...#....###.#....#....',
'.....#.######.#.#..#..#.#.....#',
'.#..#.##.#....#.##..#.#...##..#',
'.##.###..#..#..#.###...#####.#.',
'#...#...........#.....#.......#',
'#....##.#.#..##...#..####...#..',
'#.####......#####.....#.##..#..',
'.#...#....#...##..##.#.#......#',
'#..###.....##.#.......#.##...##'];
(31) ["#...##.####.#.......#.##..##.#.", "#.##.#..#..#...##..##.##.#.....", "#..#####.#......#..#....#.###.#", "...#.#.#...#..#.....#..#..#.#..", ".#.....##..#...#..#.#...##.....", "##.....#..........##..#......##", ".##..##.#.#....##..##.......#..", "#.##.##....###..#...##...##....", "##.#.#............##..#...##..#", "###..##.###.....#.##...####....", "...##..#...##...##..#.#..#...#.", "..#.#.##.#.#.#####.#....####.#.", "#......###.##....#...#...#...##", ".....#...#.#.#.#....#...#......", "#..#.#.#..#....#..#...#..#..##.", "#.....#..##.....#...###..#..#.#", ".....####.#..#...##..#..#..#..#", "..#.....#.#........#.#.##..####", ".#.....##..#.##.....#...###....", "###.###....#..#..#.....#####...", "#..##.##..##.#.#....#.#......#.", ".#....#.##..#.#.#.......##.....", "##.##...#...#....###.#....#....", ".....#.######.#.#..#..#.#.....#", ".#..#.##.#....#.##..#.#...##..#", ".##.###..#..#..#.###...#####.#.", "#...#...........#.....#.......#", "#....##.#.#..##...#..####...#..", "#.####......#####.....#.##..#..", ".#...#....#...##..##.#.#......#", "#..###.....##.#.......#.##...##"]
grid = rows.map(row => row.split(''));
(31) [Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31)]
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount = 0;
0
rows = ['.#..##.###...#######',
'##.############..##.',
'.#.######.########.#',
'.###.#######.####.#.',
'#####.##.#.##.###.##',
'..#####..#.#########',
'####################',
'#.####....###.#.#.##',
'##.#################',
'#####.##.###..####..',
'..######..##.#######',
'####.##.####...##..#',
'.#####..#.######.###',
'##...#.##########...',
'#.##########.#######',
'.####.#.###.###.#.##',
'....##.##.###..#####',
'.#.#.###########.###',
'#.#.#.#####.####.###',
'###.##.####.##.#..##'];
(20) [".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##"]
grid = rows.map(row => row.split(''));
(20) [Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20), Array(20)]
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
210
countAsteroidsVisible = (grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
            count++;
			coords.push([y - i,x]);
        }
    }
	let asteroidDown = false;
    for(let i = 1; y + i < grid.length && !asteroidDown; i++){
        if(grid[y + i][x] === '#'){
            asteroidDown = true;
            count++;coords.push([y + i,x]);
        }
    }
	let asteroidLeft = false;
    for(let i = 1; x - i >= 0 && !asteroidLeft; i++){
        if(grid[y][x - i] === '#'){
            asteroidLeft = true;
            count++;coords.push([y, x - i]);
        }
    }
	let asteroidRight = false;
    for(let i = 1; x + i < grid[0].length && !asteroidRight; i++){
        if(grid[y][x + i] === '#'){
            asteroidRight = true;
            count++;coords.push([y ,x+i]);
        }
    }
	let nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
	let usedRatios = new Set();
	nums.forEach(xDir => {
		nums.forEach(yDir => {
			if(!usedRatios.has(Math.floor(yDir/xDir * 1000))){
				usedRatios.add(Math.floor(yDir/xDir * 1000));
                let asteroidToUpperLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y - yDir*i >= 0 && !asteroidToUpperLeft; i++){
                    if(grid[y - yDir *i][x - xDir * i] === '#'){
                        asteroidToUpperLeft = true;
                        count++;coords.push([y - yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToUpperRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y - yDir*i >= 0 && !asteroidToUpperRight; i++){
                    if(grid[y - yDir *i][x + xDir * i] === '#'){
                        asteroidToUpperRight = true;
                        count++;coords.push([y - yDir *i,x + xDir * i]);
                    }
                }
                let asteroidToLowerLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y + yDir*i < grid.length && !asteroidToLowerLeft; i++){
                    if(grid[y + yDir *i][x - xDir * i] === '#'){
                        asteroidToLowerLeft = true;
                        count++;coords.push([y + yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToLowerRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y + yDir*i < grid.length && !asteroidToLowerRight; i++){
                    if(grid[y + yDir *i][x + xDir * i] === '#'){
                        asteroidToLowerRight = true;
                        count++;coords.push([y + yDir *i,x + xDir * i]);
                    }
                }               
			}
        });
    });
	return coords;
};
(grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
   …
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
rows=['#...##.####.#.......#.##..##.#.',
'#.##.#..#..#...##..##.##.#.....',
'#..#####.#......#..#....#.###.#',
'...#.#.#...#..#.....#..#..#.#..',
'.#.....##..#...#..#.#...##.....',
'##.....#..........##..#......##',
'.##..##.#.#....##..##.......#..',
'#.##.##....###..#...##...##....',
'##.#.#............##..#...##..#',
'###..##.###.....#.##...####....',
'...##..#...##...##..#.#..#...#.',
'..#.#.##.#.#.#####.#....####.#.',
'#......###.##....#...#...#...##',
'.....#...#.#.#.#....#...#......',
'#..#.#.#..#....#..#...#..#..##.',
'#.....#..##.....#...###..#..#.#',
'.....####.#..#...##..#..#..#..#',
'..#.....#.#........#.#.##..####',
'.#.....##..#.##.....#...###....',
'###.###....#..#..#.....#####...',
'#..##.##..##.#.#....#.#......#.',
'.#....#.##..#.#.#.......##.....',
'##.##...#...#....###.#....#....',
'.....#.######.#.#..#..#.#.....#',
'.#..#.##.#....#.##..#.#...##..#',
'.##.###..#..#..#.###...#####.#.',
'#...#...........#.....#.......#',
'#....##.#.#..##...#..####...#..',
'#.####......#####.....#.##..#..',
'.#...#....#...##..##.#.#......#',
'#..###.....##.#.......#.##...##'];
(31) ["#...##.####.#.......#.##..##.#.", "#.##.#..#..#...##..##.##.#.....", "#..#####.#......#..#....#.###.#", "...#.#.#...#..#.....#..#..#.#..", ".#.....##..#...#..#.#...##.....", "##.....#..........##..#......##", ".##..##.#.#....##..##.......#..", "#.##.##....###..#...##...##....", "##.#.#............##..#...##..#", "###..##.###.....#.##...####....", "...##..#...##...##..#.#..#...#.", "..#.#.##.#.#.#####.#....####.#.", "#......###.##....#...#...#...##", ".....#...#.#.#.#....#...#......", "#..#.#.#..#....#..#...#..#..##.", "#.....#..##.....#...###..#..#.#", ".....####.#..#...##..#..#..#..#", "..#.....#.#........#.#.##..####", ".#.....##..#.##.....#...###....", "###.###....#..#..#.....#####...", "#..##.##..##.#.#....#.#......#.", ".#....#.##..#.#.#.......##.....", "##.##...#...#....###.#....#....", ".....#.######.#.#..#..#.#.....#", ".#..#.##.#....#.##..#.#...##..#", ".##.###..#..#..#.###...#####.#.", "#...#...........#.....#.......#", "#....##.#.#..##...#..####...#..", "#.####......#####.....#.##..#..", ".#...#....#...##..##.#.#......#", "#..###.....##.#.......#.##...##"]
grid = rows.map(row => row.split(''));
(31) [Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31), Array(31)]
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc <= grid[0].length; xc++){
		for(let yc = 0; yc <= grid.length yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
VM1944:4 Uncaught SyntaxError: Unexpected identifier
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc <= grid[0].length; xc++){
		for(let yc = 0; yc <= grid.length yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }	
};
VM1973:4 Uncaught SyntaxError: Unexpected identifier
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc <= grid[0].length; xc++){
		for(let yc = 0; yc <= grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc <= grid[0].length; xc++){
		for(let yc = 0; yc <= grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
VM1977:5 Uncaught TypeError: Cannot read property '0' of undefined
    at countAsteroidsVisible (<anonymous>:5:15)
    at <anonymous>:3:25
countAsteroidsVisible @ VM1977:5
(anonymous) @ VM2014:3
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }	
};
VM2021:4 Uncaught SyntaxError: Unexpected identifier
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
VM2042:3 Uncaught TypeError: Cannot read property 'length' of undefined
    at <anonymous>:3:58
(anonymous) @ VM2042:3
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }
	return foundBearings.size();	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add((xc - x) / (yc - y));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y).length;
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
283
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if(xc - x > 0 && yc - y > 0){
					foundBearings.add(1000 * (xc - x) / (yc - y));
                } else if(xc - x > 0 && yc - y <= 0){
					foundBearings.add(100000 * (xc - x) / (yc - y));
                } else if (xc - x <= 0 && yc - y > 0){
					foundBearings.add(10000000 * (xc - x) / (yc - y));
                } else {

					foundBearings.add((xc - x) / (yc - y));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
289
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if(xc - x > 0 && yc - y > 0){
					foundBearings.add(Math.floor(1000 * (xc - x) / (yc - y)));
                } else if(xc - x > 0 && yc - y <= 0){
					foundBearings.add(Math.floor(100000 * (xc - x) / (yc - y)));
                } else if (xc - x <= 0 && yc - y > 0){
					foundBearings.add(Math.floor(10000000 * (xc - x) / (yc - y)));
                } else {

					foundBearings.add(Math.floor(10 * (xc - x) / (yc - y)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
285
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if(yc - y === 0){
					if(xc - x > 0){
						foundBearings.add(9999999999999999999);
                    } else {
						foundBearings.add(-9999999999999999999);
                    }
                } else if(xc - x === 0){
					if(yc - y > 0){
						foundBearings.add(999999999999999999);
                    } else {
						foundBearings.add(-999999999999999999);
                    }
                }else if(xc - x > 0 && yc - y > 0){
					foundBearings.add(Math.floor(1000 * (xc - x) / (yc - y)));
                } else if(xc - x > 0 && yc - y <= 0){
					foundBearings.add(Math.floor(100000 * (xc - x) / (yc - y)));
                } else if (xc - x <= 0 && yc - y > 0){
					foundBearings.add(Math.floor(10000000 * (xc - x) / (yc - y)));
                } else {

					foundBearings.add(Math.floor(10 * (xc - x) / (yc - y)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
286
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if(yc - y === 0){
					if(xc - x > 0){
						foundBearings.add(999999999999999999999);
                    } else {
						foundBearings.add(-999999999999999999999);
                    }
                } else if(xc - x === 0){
					if(yc - y > 0){
						foundBearings.add(9999999999999999999);
                    } else {
						foundBearings.add(-9999999999999999999);
                    }
                }else if(xc - x > 0 && yc - y > 0){
					foundBearings.add(Math.floor(1000000 * (xc - x) / (yc - y)));
                } else if(xc - x > 0 && yc - y <= 0){
					foundBearings.add(Math.floor(1000000000 * (xc - x) / (yc - y)));
                } else if (xc - x <= 0 && yc - y > 0){
					foundBearings.add(Math.floor(1000000000000 * (xc - x) / (yc - y)));
                } else {

					foundBearings.add(Math.floor(1000 * (xc - x) / (yc - y)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
290
let sampleSet = new Set();
undefined
sampleSet.add(999999999999999999999999);
Set(1) {1e+24}
sampleSet.add(31 / -31 * 100000)
Set(2) {1e+24, -100000}
sampleSet.add(1 / 31)
Set(3) {1e+24, -100000, 0.03225806451612903}
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add(Math.atan((yc - y) / (xc - x)));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
let maxCount = 0;
VM3467:1 Uncaught SyntaxError: Identifier 'maxCount' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM3467:1
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
283
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add(Math.atan((xc - x) / (yc - y)));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
283
Math.atan((31 / 1))
1.5385494443596428
Math.atan((31 / 2))
1.5063694873693432
Math.atan((30 / 2))
1.5042281630190728
Math.atan((15))
1.5042281630190728
Math.atan((5))
1.373400766945016
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if((xc - x) === 0 && (yx - y) < 0){
					foundBearings.add(2);
                } else {

					foundBearings.add(Math.atan((xc - x) / (yc - y)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
VM3749:6 Uncaught ReferenceError: yx is not defined
    at countAsteroidsVisible (<anonymous>:6:27)
    at <anonymous>:3:25
countAsteroidsVisible @ VM3749:6
(anonymous) @ VM3765:3
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if((xc - x) === 0 && (yc - y) < 0){
					foundBearings.add(2);
                } else {

					foundBearings.add(Math.atan((xc - x) / (yc - y)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
284
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add(Math.atan2((xc - x) , (yc - y)));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
290
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add(Math.atan2((yc - y), (xc - x)));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				foundBearings.add(Math.atan2((yc - y), (xc - x)));
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
maxCount
290
Math.atan2(1, 0)
1.5707963267948966
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if((xc - x) === 0 && (yc - y) < 0){
					foundBearings.add(2);
                } else {

					foundBearings.add(Math.atan2((yc - y), (xc - x)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
maxCount = 0;
0
countAsteroidsVisible = (grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
				if((xc - x) === 0 && (yc - y) < 0){
					foundBearings.add(2);
                } else {

					foundBearings.add(Math.atan2((yc - y), (xc - x)));
                }
            }
        }
    }
	return foundBearings.size;	
};
(grid, x, y) => {
	let foundBearings = new Set();
    for(let xc = 0; xc < grid[0].length; xc++){
		for(let yc = 0; yc < grid.length; yc++){
			if(grid[yc][xc] === '#' && !(xc === x && yc === y)){
		…
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
        let thisCount = countAsteroidsVisible(grid, x, y);
		if(thisCount > maxCount){
            maxCount = thisCount;
        }
    }
}
undefined
Math.atan2(1, 0)
1.5707963267948966
Math.atan2(0,1)
0
Math.atan2(1, -1)
2.356194490192345
Math.atan2(-1, -1)
-2.356194490192345
Math.atan2(-1, 1)
-0.7853981633974483
Math.atan2(1, 1)
0.7853981633974483
Math.atan2(0, 1)
0
Math.atan2(0, 2)
0
Math.atan2(0, -2)
3.141592653589793
Math.atan2(2, 0)
1.5707963267948966
Math.atan2(-2, 0)
-1.5707963267948966
maxCount = 0;
0
countAsteroidsVisible = (grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
            count++;
			coords.push([y - i,x]);
        }
    }
	let asteroidDown = false;
    for(let i = 1; y + i < grid.length && !asteroidDown; i++){
        if(grid[y + i][x] === '#'){
            asteroidDown = true;
            count++;coords.push([y + i,x]);
        }
    }
	let asteroidLeft = false;
    for(let i = 1; x - i >= 0 && !asteroidLeft; i++){
        if(grid[y][x - i] === '#'){
            asteroidLeft = true;
            count++;coords.push([y, x - i]);
        }
    }
	let asteroidRight = false;
    for(let i = 1; x + i < grid[0].length && !asteroidRight; i++){
        if(grid[y][x + i] === '#'){
            asteroidRight = true;
            count++;coords.push([y ,x+i]);
        }
    }
	let nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
	let usedRatios = new Set();
	nums.forEach(xDir => {
		nums.forEach(yDir => {
			if(!usedRatios.has(yDir/xDir)){
				usedRatios.add(yDir/xDir);
                let asteroidToUpperLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y - yDir*i >= 0 && !asteroidToUpperLeft; i++){
                    if(grid[y - yDir *i][x - xDir * i] === '#'){
                        asteroidToUpperLeft = true;
                        count++;coords.push([y - yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToUpperRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y - yDir*i >= 0 && !asteroidToUpperRight; i++){
                    if(grid[y - yDir *i][x + xDir * i] === '#'){
                        asteroidToUpperRight = true;
                        count++;coords.push([y - yDir *i,x + xDir * i]);
                    }
                }
                let asteroidToLowerLeft = false;
                for(let i = 1; x - xDir*i >= 0 && y + yDir*i < grid.length && !asteroidToLowerLeft; i++){
                    if(grid[y + yDir *i][x - xDir * i] === '#'){
                        asteroidToLowerLeft = true;
                        count++;coords.push([y + yDir *i,x - xDir * i]);
                    }
                }
                let asteroidToLowerRight = false;
                for(let i = 1; x + xDir*i < grid[0].length && y + yDir*i < grid.length && !asteroidToLowerRight; i++){
                    if(grid[y + yDir *i][x + xDir * i] === '#'){
                        asteroidToLowerRight = true;
                        count++;coords.push([y + yDir *i,x + xDir * i]);
                    }
                }               
			}
        });
    });
	return coords;
};
(grid, x, y) => {
    let count = 0;
	let coords = [];
	let asteroidUp = false;
	for(let i = 1; y - i >= 0 && !asteroidUp; i++){
        if(grid[y - i][x] === '#'){
            asteroidUp = true;
   …
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
		if(grid[y][x] === '#'){

            let thisCount = countAsteroidsVisible(grid, x, y)length;
            if(thisCount > maxCount){
                maxCount = thisCount;
            }
        }
    }
}
VM4425:5 Uncaught SyntaxError: Unexpected identifier
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
		if(grid[y][x] === '#'){

            let thisCount = countAsteroidsVisible(grid, x, y).length;
            if(thisCount > maxCount){
                maxCount = thisCount;
            }
        }
    }
}
undefined
maxCount
288
maxCount = 0;
0
let maxAsteroidCoords;
undefined
let stationPos;
undefined
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
		if(grid[y][x] === '#'){
			let astPost = countAsteroidsVisible(grid, x, y);
            let thisCount = astPost.length;
            if(thisCount > maxCount){
                maxCount = thisCount;
				maxAsteroidCoords = astPost;
				stationsPos = [y, x];
            }
        }
    }
}
undefined
maxCount = 0;
0
for(let x = 0; x < grid[0].length; x++){
    for(let y = 0; y < grid.length; y++){
		if(grid[y][x] === '#'){
			let astPost = countAsteroidsVisible(grid, x, y);
            let thisCount = astPost.length;
            if(thisCount > maxCount){
                maxCount = thisCount;
				maxAsteroidCoords = astPost;
				stationPos = [y, x];
            }
        }
    }
}
undefined
maxAsteroidCoords
(288) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), …][0 … 99][100 … 199][200 … 287]length: 288__proto__: Array(0)
stationPos
(2) [22, 17]
let maxAsteroidCoordsWAngle = maxAsteroidCoords.map((coord) => {
    return {coord: coodr, angle: Math.atan2(coord[1] - stationPos[1], coord[0] - stationPos[0])};
});
VM5207:2 Uncaught ReferenceError: coodr is not defined
    at <anonymous>:2:20
    at Array.map (<anonymous>)
    at <anonymous>:1:49
(anonymous) @ VM5207:2
(anonymous) @ VM5207:1
let maxAsteroidCoordsWAngle = maxAsteroidCoords.map((coord) => {
    return {coord: coord, angle: Math.atan2(coord[1] - stationPos[1], coord[0] - stationPos[0])};
});
VM5228:1 Uncaught SyntaxError: Identifier 'maxAsteroidCoordsWAngle' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM5228:1
maxAsteroidCoordsWAngle = maxAsteroidCoords.map((coord) => {
    return {coord: coord, angle: Math.atan2(coord[1] - stationPos[1], coord[0] - stationPos[0])};
});
VM5233:1 Uncaught ReferenceError: maxAsteroidCoordsWAngle is not defined
    at <anonymous>:1:25
(anonymous) @ VM5233:1
let coordsWAngle = maxAsteroidCoords.map((coord) => {
    return {coord: coord, angle: Math.atan2(coord[1] - stationPos[1], coord[0] - stationPos[0])};
});
undefined
let sortedCoords = coordsWAngle.sort((a,b) => a.angle - b.angle);
undefined
sortedCoords[0]
{coord: Array(2), angle: -3.0940095503128098}
sortedCoords[159]
{coord: Array(2), angle: 0}angle: 0coord: (2) [24, 17]__proto__: Object
stationPos
(2) [22, 17]
let correctlySortedCoords = sortedCoords.slice(159).concat(sortedCoords.slice(0,158));
undefined
correctlySortedCoords[199]
{coord: Array(2), angle: -2.2937756801963873}angle: -2.2937756801963873coord: (2) [7, 0]__proto__: Object
coordsWAngle = maxAsteroidCoords.map((coord) => {
    return {coord: coord, angle: Math.atan2(coord[0] - stationPos[0], coord[1] - stationPos[1])};
});
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
Math.atan(1,0)
0.7853981633974483
Math.atan2(1,0)
1.5707963267948966
Math.atan2(1,1)
0.7853981633974483
Math.atan2(0,1)
0
Math.atan2(-1, 1)
-0.7853981633974483
Math.atan2(-1, 0)
-1.5707963267948966
Math.atan2(-1, -1)
-2.356194490192345
Math.atan2(0, -1)
3.141592653589793
Math.atan2(1, -1)
2.356194490192345
Math.atan2(1, -1) * 180 / Math.PI
135
Math.atan2(1,0) * 180 / Math.PI
90
Math.atan2(-1, -1) * 180 / Math.PI
-135
let convertAngle = (rad) => rad * 180 / Math.PI;
undefined
let adjustAngle = (deg) => {
    let newDeg = deg - 90;
    if(newDeg < 0){
        newDeg = 360 + newDeg;
    }
    return newDeg;
}
undefined
coordsWAngle = coordsWAngle.map((coordWAngle) => { return {coord: coordWAngle.coord, angle: adjustAngle(convertAngle(coordWAngle.angle))}});
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords = coordsWAngle.sort((a, b) => a.angle - b.angle);
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: 0}angle: 0coord: (2) [24, 17]__proto__: Object
sortedCoords[1]
{coord: Array(2), angle: 9.462322208025626}angle: 9.462322208025626coord: (2) [28, 16]__proto__: Object
sortedCoords[287]
{coord: Array(2), angle: 351.86989764584405}angle: 351.86989764584405coord: (2) [29, 18]__proto__: Object
sortedCoords = coordsWAngle.sort((a, b) => b.angle - a.angle);
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: 351.86989764584405}angle: 351.86989764584405coord: (2) [29, 18]__proto__: Object
sortedCoords[1]
{coord: Array(2), angle: 348.69006752597977}angle: 348.69006752597977coord: (2) [27, 18]__proto__: Object
sortedCoords[198]
{coord: Array(2), angle: 131.42366562500263}angle: 131.42366562500263coord: (2) [7, 0]__proto__: Object
sortedCoords[287]
{coord: Array(2), angle: 0}angle: 0coord: (2) [24, 17]__proto__: Object
Math.atan2(-1, 0)
-1.5707963267948966
Math.atan2(-1, 1)
-0.7853981633974483
Math.atan2(0, 1)
0
Math.atan2(1, 1)
0.7853981633974483
Math.atan2(1, 0)
1.5707963267948966
Math.atan2(1, -1)
2.356194490192345
Math.atan2(0, -1)
3.141592653589793
Math.atan2(-1, -1)
-2.356194490192345
Math.atan2(-0.000000000001, -1)
-3.141592653588793
Math.atan2(-0.0000001, -1) + Math.PI
9.999999983634211e-8
Math.atan2(-1, 0) + Math.PI - (Math.PI / 2)
0
Math.atan2(-1, 0) + Math.PI / 2
0
coordsWAngle = maxAsteroidCoords.map((coord) => {
	let adjustedAngle = Math.atan2(coord[0] - stationPos[0], coord[1] - stationPos[1]) + Math.PI / 2;
	if(adjustedAngle > Math.PI){
		adjustAngle = adjustAngle - Math.PI;
    }
    return {coord: coord, angle: adjustedAngle};
});

(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords = coordsWAngle.sort((a, b) => b.angle - a.angle);
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: 4.71238898038469}angle: 4.71238898038469coord: (2) [22, 12]__proto__: Object
coordsWAngle = maxAsteroidCoords.map((coord) => {
	let adjustedAngle = Math.atan2(coord[0] - stationPos[0], coord[1] - stationPos[1]) + Math.PI / 2;
	if(adjustedAngle > Math.PI){
		adjustedAngle = adjustAngle - Math.PI;
    }
	if(adjustedAngle < 0){
		adjustedAngle = adjustAngle + Math.PI;
    }
    return {coord: coord, angle: adjustedAngle};
});
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords = coordsWAngle.sort((a, b) => b.angle - a.angle);

(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: 3.141592653589793}angle: 3.141592653589793coord: (2) [24, 17]__proto__: Object
sortedCoords = coordsWAngle.sort((a, b) => a.angle - b.angle);

(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: 0}angle: 0coord: (2) [19, 17]__proto__: Object
stationPos
(2) [22, 17]
sortedCoords[1]
{coord: Array(2), angle: 0.07130746478529026}angle: 0.07130746478529026coord: (2) [8, 18]__proto__: Object
sortedCoords[2]
{coord: Array(2), angle: 0.0767718912697779}angle: 0.0767718912697779coord: (2) [9, 18]__proto__: Object
sortedCoords[100]
{coord: Array(2), angle: NaN}angle: NaNcoord: (2) [1, 5]__proto__: Object
sortedCoords[99]
{coord: Array(2), angle: 2.4668517113662407}angle: 2.4668517113662407coord: (2) [27, 21]__proto__: Object
sortedCoords[101]
{coord: Array(2), angle: NaN}angle: NaNcoord: (2) [13, 13]__proto__: Object
coordsWAngle = maxAsteroidCoords.map((coord) => {
	let adjustedAngle = Math.atan2(coord[0] - stationPos[0], coord[1] - stationPos[1]) + Math.PI / 2;
	if(adjustedAngle > Math.PI){
		adjustedAngle = adjustedAngle - Math.PI;
    }
	if(adjustedAngle < 0){
		adjustedAngle = adjustedAngle + Math.PI;
    }
    return {coord: coord, angle: adjustedAngle};
});
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords = coordsWAngle.sort((a, b) => a.angle - b.angle);


(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[99]
{coord: Array(2), angle: 1.1071487177940904}angle: 1.1071487177940904coord: (2) [19, 23]__proto__: Object
sortedCoords[100]
{coord: Array(2), angle: 1.1071487177940904}angle: 1.1071487177940904coord: (2) [28, 5]__proto__: Object
stationPos
(2) [22, 17]
stationPos[101]
undefined
sortedCoords[101]
{coord: Array(2), angle: 1.1309537439791608}angle: 1.1309537439791608coord: (2) [30, 0]__proto__: Object
sortedCoords[200]
{coord: Array(2), angle: 2.279422598922567}angle: 2.279422598922567coord: (2) [16, 10]__proto__: Object
sortedCoords[150]
{coord: Array(2), angle: 1.7234456551901616}angle: 1.7234456551901616coord: (2) [20, 4]__proto__: Object
sortedCoords[0]
{coord: Array(2), angle: 0}
stationPos
(2) [22, 17]
sortedCoords[50]
{coord: Array(2), angle: 0.5028432109278609}angle: 0.5028432109278609coord: (2) [2, 28]__proto__: Object
sortedCoords[60]
{coord: Array(2), angle: 0.5763752205911836}angle: 0.5763752205911836coord: (2) [2, 30]__proto__: Object
sortedCoords[70]
{coord: Array(2), angle: 0.6528466311007742}angle: 0.6528466311007742coord: (2) [5, 30]__proto__: Object
sortedCoords[80]
{coord: Array(2), angle: 0.8288490587889791}angle: 0.8288490587889791coord: (2) [11, 29]__proto__: Object
sortedCoords[90]
{coord: Array(2), angle: 1.0040671092713902}angle: 1.0040671092713902coord: (2) [15, 28]__proto__: Object
stationPos
(2) [22, 17]
sortedCoords[100]
{coord: Array(2), angle: 1.1071487177940904}angle: 1.1071487177940904coord: (2) [28, 5]__proto__: Object
sortedCoords[95]
{coord: Array(2), angle: 1.0516502125483735}angle: 1.0516502125483735coord: (2) [18, 24]__proto__: Object
sortedCoords[98]
{coord: Array(2), angle: 1.0768549578753155}angle: 1.0768549578753155coord: (2) [15, 30]__proto__: Object
sortedCoords[99]
{coord: Array(2), angle: 1.1071487177940904}angle: 1.1071487177940904coord: (2) [19, 23]__proto__: Object
sortedCoords[100]
{coord: Array(2), angle: 1.1071487177940904}angle: 1.1071487177940904coord: (2) [28, 5]__proto__: Object
sortedCoords[110]
{coord: Array(2), angle: 1.176005207095135}angle: 1.176005207095135coord: (2) [17, 29]__proto__: Object
coordsWAngle = maxAsteroidCoords.map((coord) => {
	let adjustedAngle = Math.atan2(coord[0] - stationPos[0], coord[1] - stationPos[1]) + Math.PI / 2;
    return {coord: coord, angle: adjustedAngle};
});

(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords = coordsWAngle.sort((a, b) => a.angle - b.angle);
(288) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedCoords[0]
{coord: Array(2), angle: -1.5083775167989395}angle: -1.5083775167989395coord: (2) [21, 1]__proto__: Object
stationPos
(2) [22, 17]
sortedCoords[2]
{coord: Array(2), angle: -1.4601391056210011}angle: -1.4601391056210011coord: (2) [21, 8]__proto__: Object
Math.PI / 4
0.7853981633974483
-1 / 0
-Infinity
1 / 1
1
-1 / 1
-1
0 / 1
0
1 / 1
1
1 / 0
Infinity
let coordsToRight = maxAsteroidCoords.filter((coord) => coord[1] >= stationPos[1]);
undefined
let coordsToLeft = maxAsteroidCoords.filter((coord) => coord[1] < stationPos[1]);
undefined
let coordsToLowerLeft = coordsToLeft.filter((coord) => coord[0] > stationPos[0]);
undefined
let coordsToUpperLeft = coordsToLeft.filter((coord) => coord[0] <= stationPos[0]);
undefined
coordsToRight.length + coordsToLowerLeft.length;
177
-1 / 0
-Infinity
-10 / - 1
10
-10 / 1
-10
-1 / 1
-1
-1/ 10
-0.1
let coordsToUpperLeftWithSlopeToUse = coordsToUpperLeft.map(coord => return {
VM11507:1 Uncaught SyntaxError: Unexpected token 'return'
let coordsToUpperLeftWithSlopeForUse = coordsToUpperLeft.map(coord => { return {coord: coords, slope: (stationPos[1] - coord[1]) / (coord[0] - stationPos[0])}});
	
VM11613:1 Uncaught ReferenceError: coords is not defined
    at <anonymous>:1:88
    at Array.map (<anonymous>)
    at <anonymous>:1:58
(anonymous) @ VM11613:1
(anonymous) @ VM11613:1
let coordsToUpperLeftWithSlopeForUse = coordsToUpperLeft.map(coord => { return {coord: coord, slope: (stationPos[1] - coord[1]) / (coord[0] - stationPos[0])}});
VM11632:1 Uncaught SyntaxError: Identifier 'coordsToUpperLeftWithSlopeForUse' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM11632:1
coordsToUpperLeftWithSlopeForUse = coordsToUpperLeft.map(coord => { return {coord: coord, slope: (stationPos[1] - coord[1]) / (coord[0] - stationPos[0])}});
VM11638:1 Uncaught ReferenceError: coordsToUpperLeftWithSlopeForUse is not defined
    at <anonymous>:1:34
(anonymous) @ VM11638:1
coordsToUpperLeftWSlopeForUse = coordsToUpperLeft.map(coord => { return {coord: coord, slope: (stationPos[1] - coord[1]) / (coord[0] - stationPos[0])}});
(111) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
let sortedUpperLeft = coordsToUpperLeftWSlopeForUse.sort((a, b) => a.slope - b.slope);
undefined
sortedUpperLeft[0]
{coord: Array(2), slope: -16}coord: (2) [21, 1]slope: -16__proto__: Object
stationPos
(2) [22, 17]
sortedUpperLeft[110]
{coord: Array(2), slope: Infinity}coord: (2) [22, 12]slope: Infinity__proto__: Object
sortedUpperLeft[109]
{coord: Array(2), slope: -0.047619047619047616}coord: (2) [1, 16]slope: -0.047619047619047616__proto__: Object
sortedUpperLeft = sortedUpperLeft.slice(0,1).concat(sortedUpperLeft.slice(1));
(111) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedUpperLeft[0]
{coord: Array(2), slope: -16}
sortedUpperLeft = sortedUpperLeft.slice(110).concat(sortedUpperLeft.slice(0,109));
(110) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]
sortedUpperLeft[0]
{coord: Array(2), slope: Infinity}coord: (2) [22, 12]slope: Infinity__proto__: Object
sortedUpperLeft[1]
{coord: Array(2), slope: -16}coord: (2) [21, 1]slope: -16__proto__: Object
sortedUpperLeft[2]
{coord: Array(2), slope: -11}coord: (2) [21, 6]slope: -11__proto__: Object
sortedUpperLeft[3]
{coord: Array(2), slope: -9}coord: (2) [21, 8]slope: -9__proto__: Object
200 - (coordsToRight.length + coordsToLowerLeft.length)
23
sortedUpperLeft[22]
{coord: Array(2), slope: -1.8333333333333333}coord: (2) [16, 6]slope: -1.8333333333333333__proto__: Object
