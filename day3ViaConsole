let line1 = 'R8,U5,L5,D3'
undefined
let line2 = 'U7,R6,D4,L4'
undefined
const moveRight = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0] + i, curCoord[1]]);
    }
};
undefined
moveRight([0,0], 8)
undefined
let testMoves = moveRight([0,0], 8)
undefined
testMoves
undefined
const moveRightRet = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0] + i, curCoord[1]]);
    } return nextCoords;
};
undefined
let testMoves = moveRightRet([0,0], 8)
VM7027:1 Uncaught SyntaxError: Identifier 'testMoves' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM7027:1
testMoves = moveRightRet([0,0], 8)
(8) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [1, 0]1: (2) [2, 0]2: (2) [3, 0]3: (2) [4, 0]4: (2) [5, 0]5: (2) [6, 0]6: (2) [7, 0]7: (2) [8, 0]length: 8__proto__: Array(0)
const moveLeftRet = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0] - i, curCoord[1]]);
    } return nextCoords;
};
undefined
const moveUpRet = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0], curCoord[1] + 1]);
    } return nextCoords;
};
undefined
const moveDownRet = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0], curCoord[1] - 1]);
    } return nextCoords;
};
undefined
line1.split(',')
(4) ["R8", "U5", "L5", "D3"]
line1.split(',')[0][0]
"R"
line1.split(',')[0].slice(1)
"8"
const followPath = (path) => {
    const steps = path.split(',');
    steps.forEach((step) => {
        const dir = step[0];
        const dist = parseInt(step.slice(1));
        
VM7760:6 Uncaught SyntaxError: Unexpected end of input
const followPath = (path) => {
	const pathCoords = [[0,0]];
    const steps = path.split(',');
    steps.forEach((step) => {
        const dir = step[0];
        const dist = parseInt(step.slice(1));
		const startingCoord = pathCoords[pathCoords.length - 1];
		if(dir === 'R'){
            pathCoords = pathCoords.concat(moveRightRet(startingCoord, dist));
        }
		if(dir === 'L'){
            pathCoords = pathCoords.concat(moveLeftRet(startingCoord, dist));
        }
		if(dir === 'U'){
            pathCoords = pathCoords.concat(moveUpRet(startingCoord, dist));
        }
		if(dir === 'D'){
            pathCoords = pathCoords.concat(moveDownRet(startingCoord, dist));
        }
    });
	return pathCoords;
}
undefined
followPath(line1)
VM8249:9 Uncaught TypeError: Assignment to constant variable.
    at <anonymous>:9:24
    at Array.forEach (<anonymous>)
    at followPath (<anonymous>:4:11)
    at <anonymous>:1:1
(anonymous) @ VM8249:9
followPath @ VM8249:4
(anonymous) @ VM8291:1
const followPath2 = (path) => {
	let pathCoords = [[0,0]];
    const steps = path.split(',');
    steps.forEach((step) => {
        const dir = step[0];
        const dist = parseInt(step.slice(1));
		const startingCoord = pathCoords[pathCoords.length - 1];
		if(dir === 'R'){
            pathCoords = pathCoords.concat(moveRightRet(startingCoord, dist));
        }
		if(dir === 'L'){
            pathCoords = pathCoords.concat(moveLeftRet(startingCoord, dist));
        }
		if(dir === 'U'){
            pathCoords = pathCoords.concat(moveUpRet(startingCoord, dist));
        }
		if(dir === 'D'){
            pathCoords = pathCoords.concat(moveDownRet(startingCoord, dist));
        }
    });
	return pathCoords;
}
undefined
followPath2(line1)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [1, 0]2: (2) [2, 0]3: (2) [3, 0]4: (2) [4, 0]5: (2) [5, 0]6: (2) [6, 0]7: (2) [7, 0]8: (2) [8, 0]9: (2) [8, 1]10: (2) [8, 1]11: (2) [8, 1]12: (2) [8, 1]13: (2) [8, 1]14: (2) [7, 1]15: (2) [6, 1]16: (2) [5, 1]17: (2) [4, 1]18: (2) [3, 1]19: (2) [3, 0]20: (2) [3, 0]21: (2) [3, 0]length: 22__proto__: Array(0)
followPath2(line2)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [0, 1]2: (2) [0, 1]3: (2) [0, 1]4: (2) [0, 1]5: (2) [0, 1]6: (2) [0, 1]7: (2) [0, 1]8: (2) [1, 1]9: (2) [2, 1]10: (2) [3, 1]11: (2) [4, 1]12: (2) [5, 1]13: (2) [6, 1]14: (2) [6, 0]15: (2) [6, 0]16: (2) [6, 0]17: (2) [6, 0]18: (2) [5, 0]19: (2) [4, 0]20: (2) [3, 0]21: (2) [2, 0]length: 22__proto__: Array(0)
let moveUp = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0], curCoord[1] + i]);
    } return nextCoords;
};
undefined
let moveDown = (curCoord, dist) => {
    const nextCoords = [];
    for(let i = 1; i <= dist; i++){
        nextCoords.push([curCoord[0], curCoord[1] - i]);
    } return nextCoords;
};
undefined
let followPathCorrectly = (path) => {
	let pathCoords = [[0,0]];
    const steps = path.split(',');
    steps.forEach((step) => {
        const dir = step[0];
        const dist = parseInt(step.slice(1));
		const startingCoord = pathCoords[pathCoords.length - 1];
		if(dir === 'R'){
            pathCoords = pathCoords.concat(moveRightRet(startingCoord, dist));
        }
		if(dir === 'L'){
            pathCoords = pathCoords.concat(moveLeftRet(startingCoord, dist));
        }
		if(dir === 'U'){
            pathCoords = pathCoords.concat(moveUp(startingCoord, dist));
        }
		if(dir === 'D'){
            pathCoords = pathCoords.concat(moveDown(startingCoord, dist));
        }
    });
	return pathCoords;
}
undefined
followPathCorrectly(line1)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [1, 0]2: (2) [2, 0]3: (2) [3, 0]4: (2) [4, 0]5: (2) [5, 0]6: (2) [6, 0]7: (2) [7, 0]8: (2) [8, 0]9: (2) [8, 1]10: (2) [8, 2]11: (2) [8, 3]12: (2) [8, 4]13: (2) [8, 5]14: (2) [7, 5]15: (2) [6, 5]16: (2) [5, 5]17: (2) [4, 5]18: (2) [3, 5]19: (2) [3, 4]20: (2) [3, 3]21: (2) [3, 2]length: 22__proto__: Array(0)
followPathCorrectly(line2)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [0, 1]2: (2) [0, 2]3: (2) [0, 3]4: (2) [0, 4]5: (2) [0, 5]6: (2) [0, 6]7: (2) [0, 7]8: (2) [1, 7]9: (2) [2, 7]10: (2) [3, 7]11: (2) [4, 7]12: (2) [5, 7]13: (2) [6, 7]14: (2) [6, 6]15: (2) [6, 5]16: (2) [6, 4]17: (2) [6, 3]18: (2) [5, 3]19: (2) [4, 3]20: (2) [3, 3]21: (2) [2, 3]length: 22__proto__: Array(0)
let path1Points = new Set(followPathCorrectly(line1))
undefined
let path2Points = new Set(followPathCorrectly(line2))
undefined
let sharedPoints = [];
undefined
path1Points.forEach((pt) => if(path2Points.has(pt)) sharedPoints.push(pt));
VM9171:1 Uncaught SyntaxError: Unexpected token 'if'
path1Points.forEach((pt) => {if(path2Points.has(pt)) sharedPoints.push(pt)});
undefined
sharedPoints
[]
path1Points.forEach((pt) => {if(path2Points.has(pt)){ sharedPoints.push(pt)}});
undefined
sharedPoints
[]
path2Points.has([0,0])
false
path2Points
Set(22) {Array(2), Array(2), Array(2), Array(2), Array(2), …}[[Entries]]0: Array(2)value: (2) [0, 0]1: Array(2)2: Array(2)3: Array(2)4: Array(2)5: Array(2)6: Array(2)7: Array(2)8: Array(2)9: Array(2)10: Array(2)11: Array(2)12: Array(2)13: Array(2)14: Array(2)15: Array(2)16: Array(2)17: Array(2)18: Array(2)19: Array(2)20: Array(2)21: Array(2)size: (...)__proto__: Set
path1Points = followPathCorrectly(line1)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [1, 0]2: (2) [2, 0]3: (2) [3, 0]4: (2) [4, 0]5: (2) [5, 0]6: (2) [6, 0]7: (2) [7, 0]8: (2) [8, 0]9: (2) [8, 1]10: (2) [8, 2]11: (2) [8, 3]12: (2) [8, 4]13: (2) [8, 5]14: (2) [7, 5]15: (2) [6, 5]16: (2) [5, 5]17: (2) [4, 5]18: (2) [3, 5]19: (2) [3, 4]20: (2) [3, 3]21: (2) [3, 2]length: 22__proto__: Array(0)
path2Points = followPathCorrectly(line2)
(22) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
let ptsEqual = (p1, p2) => {return p1[0] === p2[0] && p1[1] === p2[1]}
undefined
ptsEqual(path1Points[0], path2Points[0])
true
ptsEqual(path1Points[0], path2Points[1])
false
path1Points.forEach(pt => path2Points.forEach(pt2 => {
    if(ptsEqual(pt, pt2)){
        sharedPoints.push(pt);
    }
}));
undefined
sharedPoints
(3) [Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [6, 5]2: (2) [3, 3]length: 3__proto__: Array(0)
let twoLines = document.querySelector('pre').innerText.split('\n')
undefined
twoLines
(3) ["R998,D934,L448,U443,R583,U398,R763,U98,R435,U984,L…14,D818,R340,D60,L400,D924,R69,U73,L449,U393,L906", "L1005,D207,R487,U831,R81,U507,R701,D855,R978,U790,…,U647,R774,D575,L753,D294,R131,U318,R873,U114,L30", ""]0: "R998,D934,L448,U443,R583,U398,R763,U98,R435,U984,L196,U410,L475,D163,R776,D796,R175,U640,R805,D857,R935,D768,L99,D75,R354,U551,L986,D592,R51,U648,L108,U8,R44,U298,L578,U710,R745,U60,L536,D62,R620,D454,L143,U407,R465,U606,L367,U107,L581,U900,R495,D12,R763,D244,R946,D424,R367,D696,L534,U452,R274,D942,L813,U336,L742,U134,R571,U703,R941,D532,L903,D833,L821,D577,L598,D83,R858,U798,L802,D852,R913,U309,L784,D235,L446,D571,R222,D714,R6,D379,R130,D313,R276,U632,L474,U11,L551,U257,R239,U218,R592,U901,L596,D367,L34,D397,R520,U547,L795,U192,R960,U77,L825,U954,R307,D399,R958,U239,R514,D863,L162,U266,R705,U731,R458,D514,R42,U314,R700,D651,L626,U555,R774,U773,R553,D107,L404,D100,R149,U845,L58,U674,R695,U255,R816,D884,R568,U618,R510,D566,L388,D947,L851,U127,L116,U143,L744,D361,L336,U903,L202,U683,R287,D174,L229,U371,L298,U839,L27,U462,R443,D39,R411,U788,L197,D160,L289,U840,L78,D262,R352,U83,R20,U109,R657,D225,R587,D968,R576,D791,R493,U805,R139,D699,R783,U140,L371,D170,L635,U257,R331,D311,R725,D970,R57,D986,L222,D760,L830,D960,L901,D367,R469,D560,L593,D940,L71,D384,R603,D689,R250,D859,L156,U499,L850,U166,R726,D210,L36,D584,R672,U47,L713,U985,R551,U22,L499,D575,R210,D829,L186,U340,R696,D939,L744,D46,L896,U467,L214,D71,R376,D379,L1,U870,R785,D779,L94,U723,L199,D185,R210,U937,R645,U25,R116,D821,R964,U959,R569,U496,R809,U112,R712,D315,L747,U754,L66,U614,L454,D945,R214,U965,L248,U702,L287,D863,R700,U768,R139,D242,R914,D818,R340,D60,L400,D924,R69,U73,L449,U393,L906"1: "L1005,D207,R487,U831,R81,U507,R701,D855,R978,U790,R856,U517,R693,D726,L857,D442,L13,U441,R184,D42,R27,D773,R797,D242,L689,D958,R981,D279,L635,D881,L907,U716,L90,U142,R618,D188,L725,U329,R717,D857,L583,U851,L140,U903,R363,U226,L413,U240,R772,U523,L860,U596,L861,D198,L44,U956,R862,U683,L542,U581,L346,U376,L568,D488,L254,D565,R480,D418,L567,U73,R397,U265,R632,U87,R803,D85,L100,D12,L989,U886,R279,U507,R274,U17,L36,U309,L189,D145,R50,U408,L451,D37,R930,D566,R96,U673,L302,U859,R814,U478,R218,U494,R177,D85,L376,U545,L106,U551,L469,U333,R685,U625,L933,U99,R817,D473,R412,D203,R912,U460,L527,D730,L193,U894,L256,D209,L868,D942,L8,U532,L270,U147,R919,U899,R256,U124,R204,D199,L170,D844,R974,U16,R722,U12,L470,D51,R821,U730,L498,U311,R587,D570,R981,D917,R440,D485,R179,U874,R26,D310,R302,U260,R446,D241,R694,D138,L400,D852,L194,U598,R73,U387,R660,D597,L803,D571,L956,D89,L394,U564,L287,U668,L9,D103,R152,D318,L215,U460,L870,U997,L595,D479,R262,U531,R609,U50,L165,U704,L826,D527,L901,D857,L914,U623,R432,D988,R562,D301,L277,U274,R39,D177,L827,U944,R64,U560,R801,D83,R388,U978,R387,U435,L759,U200,L760,U403,L218,D399,L178,U700,L75,U749,R85,U368,R538,U3,L172,D634,R518,D435,L542,U347,L745,U353,L178,D133,L475,U459,L522,U354,R184,U339,R845,D145,L44,U61,L603,U256,R534,U558,L998,D36,R42,U379,R813,D412,R878,D370,R629,U883,L490,D674,L863,U506,L961,D882,R436,D984,L229,D78,L779,D117,L674,U850,L494,D205,L988,D202,L368,U955,L662,U647,R774,D575,L753,D294,R131,U318,R873,U114,L30"2: ""length: 3__proto__: Array(0)
line1 = twoLines[0]
"R998,D934,L448,U443,R583,U398,R763,U98,R435,U984,L196,U410,L475,D163,R776,D796,R175,U640,R805,D857,R935,D768,L99,D75,R354,U551,L986,D592,R51,U648,L108,U8,R44,U298,L578,U710,R745,U60,L536,D62,R620,D454,L143,U407,R465,U606,L367,U107,L581,U900,R495,D12,R763,D244,R946,D424,R367,D696,L534,U452,R274,D942,L813,U336,L742,U134,R571,U703,R941,D532,L903,D833,L821,D577,L598,D83,R858,U798,L802,D852,R913,U309,L784,D235,L446,D571,R222,D714,R6,D379,R130,D313,R276,U632,L474,U11,L551,U257,R239,U218,R592,U901,L596,D367,L34,D397,R520,U547,L795,U192,R960,U77,L825,U954,R307,D399,R958,U239,R514,D863,L162,U266,R705,U731,R458,D514,R42,U314,R700,D651,L626,U555,R774,U773,R553,D107,L404,D100,R149,U845,L58,U674,R695,U255,R816,D884,R568,U618,R510,D566,L388,D947,L851,U127,L116,U143,L744,D361,L336,U903,L202,U683,R287,D174,L229,U371,L298,U839,L27,U462,R443,D39,R411,U788,L197,D160,L289,U840,L78,D262,R352,U83,R20,U109,R657,D225,R587,D968,R576,D791,R493,U805,R139,D699,R783,U140,L371,D170,L635,U257,R331,D311,R725,D970,R57,D986,L222,D760,L830,D960,L901,D367,R469,D560,L593,D940,L71,D384,R603,D689,R250,D859,L156,U499,L850,U166,R726,D210,L36,D584,R672,U47,L713,U985,R551,U22,L499,D575,R210,D829,L186,U340,R696,D939,L744,D46,L896,U467,L214,D71,R376,D379,L1,U870,R785,D779,L94,U723,L199,D185,R210,U937,R645,U25,R116,D821,R964,U959,R569,U496,R809,U112,R712,D315,L747,U754,L66,U614,L454,D945,R214,U965,L248,U702,L287,D863,R700,U768,R139,D242,R914,D818,R340,D60,L400,D924,R69,U73,L449,U393,L906"
line2 = twoLines[1]
"L1005,D207,R487,U831,R81,U507,R701,D855,R978,U790,R856,U517,R693,D726,L857,D442,L13,U441,R184,D42,R27,D773,R797,D242,L689,D958,R981,D279,L635,D881,L907,U716,L90,U142,R618,D188,L725,U329,R717,D857,L583,U851,L140,U903,R363,U226,L413,U240,R772,U523,L860,U596,L861,D198,L44,U956,R862,U683,L542,U581,L346,U376,L568,D488,L254,D565,R480,D418,L567,U73,R397,U265,R632,U87,R803,D85,L100,D12,L989,U886,R279,U507,R274,U17,L36,U309,L189,D145,R50,U408,L451,D37,R930,D566,R96,U673,L302,U859,R814,U478,R218,U494,R177,D85,L376,U545,L106,U551,L469,U333,R685,U625,L933,U99,R817,D473,R412,D203,R912,U460,L527,D730,L193,U894,L256,D209,L868,D942,L8,U532,L270,U147,R919,U899,R256,U124,R204,D199,L170,D844,R974,U16,R722,U12,L470,D51,R821,U730,L498,U311,R587,D570,R981,D917,R440,D485,R179,U874,R26,D310,R302,U260,R446,D241,R694,D138,L400,D852,L194,U598,R73,U387,R660,D597,L803,D571,L956,D89,L394,U564,L287,U668,L9,D103,R152,D318,L215,U460,L870,U997,L595,D479,R262,U531,R609,U50,L165,U704,L826,D527,L901,D857,L914,U623,R432,D988,R562,D301,L277,U274,R39,D177,L827,U944,R64,U560,R801,D83,R388,U978,R387,U435,L759,U200,L760,U403,L218,D399,L178,U700,L75,U749,R85,U368,R538,U3,L172,D634,R518,D435,L542,U347,L745,U353,L178,D133,L475,U459,L522,U354,R184,U339,R845,D145,L44,U61,L603,U256,R534,U558,L998,D36,R42,U379,R813,D412,R878,D370,R629,U883,L490,D674,L863,U506,L961,D882,R436,D984,L229,D78,L779,D117,L674,U850,L494,D205,L988,D202,L368,U955,L662,U647,R774,D575,L753,D294,R131,U318,R873,U114,L30"
path1Points = followPathCorrectly(line1)
(148829) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), …]
path2Points = followPathCorrectly(line2)
(144986) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), …][0 … 9999][10000 … 19999][20000 … 29999][30000 … 39999][40000 … 49999][50000 … 59999][50000 … 50099][50100 … 50199][50200 … 50299][50300 … 50399][50400 … 50499][50500 … 50599][50600 … 50699][50700 … 50799][50800 … 50899][50900 … 50999][51000 … 51099][51100 … 51199][51200 … 51299][51300 … 51399][51400 … 51499][51500 … 51599][51600 … 51699][51700 … 51799][51800 … 51899][51900 … 51999][52000 … 52099][52100 … 52199][52200 … 52299][52300 … 52399][52400 … 52499][52500 … 52599][52600 … 52699][52700 … 52799][52800 … 52899][52900 … 52999][53000 … 53099][53100 … 53199][53200 … 53299][53300 … 53399][53400 … 53499][53500 … 53599][53600 … 53699][53700 … 53799][53800 … 53899][53900 … 53999][54000 … 54099][54100 … 54199][54200 … 54299][54300 … 54399][54400 … 54499][54500 … 54599][54600 … 54699][54700 … 54799][54800 … 54899][54900 … 54999][55000 … 55099][55100 … 55199][55200 … 55299][55300 … 55399][55400 … 55499][55500 … 55599][55600 … 55699][55700 … 55799][55800 … 55899][55900 … 55999][56000 … 56099][56100 … 56199][56200 … 56299][56300 … 56399][56400 … 56499][56500 … 56599][56600 … 56699][56700 … 56799][56800 … 56899][56900 … 56999][57000 … 57099][57100 … 57199][57200 … 57299][57300 … 57399][57400 … 57499][57500 … 57599][57600 … 57699][57700 … 57799][57800 … 57899][57900 … 57999][58000 … 58099][58100 … 58199][58200 … 58299][58300 … 58399][58400 … 58499][58500 … 58599][58600 … 58699][58700 … 58799][58800 … 58899][58900 … 58999][59000 … 59099][59100 … 59199][59200 … 59299][59300 … 59399][59400 … 59499][59500 … 59599][59600 … 59699][59700 … 59799][59800 … 59899][59900 … 59999][60000 … 69999][70000 … 79999][80000 … 89999][90000 … 99999][100000 … 109999][110000 … 119999][120000 … 129999][130000 … 139999][140000 … 144985]length: 144986__proto__: Array(0)
sharedPoints = [];
[]
path1Points.forEach(pt => path2Points.forEach(pt2 => {
    if(ptsEqual(pt, pt2)){
        sharedPoints.push(pt);
    }
}));
undefined
sharedPoints
sharedPoints
sharedPoints
(23) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
(23) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
(23) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
let minDist = 99999999999999999999999999;
undefined
sharedPoints.slice(1).forEach(pt => {
    if(pt[0] + pt[1] < minDist){
        minDist = pt[0] + pt[1];
    }
})
undefined
minDist
1121
const findSharedPts = (path1Points, path2Points) => {
path1Points.forEach(pt => path2Points.forEach(pt2 => {
    if(ptsEqual(pt, pt2)){
        sharedPoints.push(pt);
    }
}));
};
undefined
sharedPoints = [];
[]
findSharedPts(followPathCorrectly('R75,D30,R83,U83,L12,D49,R71,U7,L72'), followPathCorrectly('U62,R66,U55,R34,D71,R55,D58,R83'));
undefined
let minDist = 99999999999999999;
VM11740:1 Uncaught SyntaxError: Identifier 'minDist' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM11740:1
minDist = 99999999999999999;
100000000000000000
sharedPoints.slice(1).forEach(pt => {
    if(pt[0] + pt[1] < minDist){
        minDist = pt[0] + pt[1];
    }
})
undefined
minDist
146
sharedPoints
(5) [Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [158, -12]2: (2) [146, 46]3: (2) [155, 4]4: (2) [155, 11]length: 5__proto__: Array(0)
sharedPoints = [];
[]
findSharedPts(path1Points, path2Points);
undefined
minDist = 99999999999999999;
100000000000000000
sharedPoints.slice(1).forEach(pt => {
	const dist = Math.abs(pt[0]) + Math.abs(pt[1])
    if(dist < minDist){
        minDist = dist;
    }
})
undefined
minDist
1519
const findSharedPtsSteps = (path1Points, path2Points) => {
const stepsToIntersection = [];
for(let i = 0; i < path1Points.length; i++){
	for(let j = 0; j < path2Points.length; j++){
		let pt = path1Points[i];
		let pt2 = path2Points[j];

    	if(ptsEqual(pt, pt2)){
        	stepsToIntersection.push([i,j]);
    	}
	}
}return stepsToIntersection;};
undefined
let stepPairs = findSharedPtsSteps(path1Points, path2Points);
undefined
minDist = 99999999999999999;
100000000000000000
sharedPoints.slice(1).forEach(pt => {
	const dist = Math.abs(pt[0]) + Math.abs(pt[1])
    if(dist < minDist){
        minDist = dist;
    }
})
undefined
stepPairs.slice(1).forEach(pt => {
	const dist = Math.abs(pt[0]) + Math.abs(pt[1])
    if(dist < minDist){
        minDist = dist;
    }
})
undefined
minDist
1519
stepPairs 
(23) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]0: (2) [0, 0]1: (2) [4097, 26347]2: (2) [5136, 12212]3: (2) [5952, 9694]4: (2) [6727, 7631]5: (2) [7766, 7468]6: (2) [8483, 9589]7: (2) [9492, 9414]8: (2) [9895, 9011]9: (2) [44956, 12982]10: (2) [45038, 13064]11: (2) [46218, 15598]12: (2) [46503, 16035]13: (2) [49187, 16621]14: (2) [49792, 15224]15: (2) [51882, 12940]16: (2) [52162, 13220]17: (2) [54815, 13529]18: (2) [55379, 12965]19: (2) [56422, 12888]20: (2) [56842, 12468]21: (2) [57658, 9438]22: (2) [57922, 9174]length: 23__proto__: Array(0)
let minSteps = 999999999999999999;
undefined
stepPairs.slice(1).forEach(pt => {
	const steps = pt[0] + pt[1]
    if(steps < minSteps){
        minSteps = steps;
    }
})
undefined
minSteps
14358
